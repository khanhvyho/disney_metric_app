name: Build desktop binaries

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Verify versions (debug)
        run: |
          python -V
          pyinstaller --version
          python -c "import streamlit; import pandas; import matplotlib; print('streamlit', streamlit.__version__)"

      # -------- Windows build (one-file .exe) --------
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Build a robust args array (no fragile backticks)
          $args = @(
          '--noconfirm','--onefile','--windowed',
          '--name','PartnerMetrics',
          '--collect-all','streamlit',
          '--collect-all','pandas',
          '--collect-all','matplotlib',
          '--collect-all','seaborn',
          '--collect-all','openpyxl',
          '--add-data','app.py;.',
          '--add-data','src;src'
          )
          if (Test-Path 'icon.ico') { $args += @('--icon','icon.ico') }
          # Ensure the script is always the final positional arg
          if (-not (Test-Path 'run_app.py')) { Write-Error 'run_app.py not found at repo root'; exit 1 }
          $args += 'run_app.py'
          pyinstaller @args

      # -------- macOS build (onedir .app â€” reliable with your launcher) --------
      - name: Build (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          ICON_FLAG=""
          [ -f icon.icns ] && ICON_FLAG="--icon icon.icns"
          pyinstaller --noconfirm --onedir --windowed \
            --name "PartnerMetrics" \
            --collect-all streamlit --collect-all pandas --collect-all matplotlib --collect-all seaborn --collect-all openpyxl \
            --add-data "app.py:." \
            --add-data "src:src" \
            $ICON_FLAG \
            run_app.py
          # Zip the .app so it downloads as a single file
          ditto -c -k --sequesterRsrc --keepParent "dist/PartnerMetrics.app" "PartnerMetrics-macOS.zip"

      # -------- Artifacts --------
      - name: Upload Windows artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: PartnerMetrics-Windows
          path: dist/PartnerMetrics.exe

      - name: Upload macOS artifacts (.app and zip)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: PartnerMetrics-macOS
          path: |
            dist/PartnerMetrics.app
            PartnerMetrics-macOS.zip
